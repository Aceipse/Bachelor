/**
 * @ngdoc controller
 * @name WisR.controller:HomeController
 * @description
 * Controller for the Home View of the application
 */
app.controller("HomeController", [
    '$scope', '$http', '$location', '$window', 'configs', function ($scope, $http, $location, $window, configs) {
        //#region Declaration of scope values

        ///Declare default values
        /**
         * @ngdoc property
         * @name .#RoomName 
         * @returns {String} RoomName 
         * @propertyOf WisR.controller:HomeController 
         * @description Property that is set when creating a new room in the modal window 
         * Default is empty string
         */
        $scope.RoomName = "";
        /**
        * @ngdoc property
        * @name .#Radius
        * @returns {Integer} Radius
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Default is 50
        */
        $scope.Radius = 50;
        /**
        * @ngdoc property
        * @name .#UniqueTag
        * @returns {String} UniqueTag
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Default is Empty string
        */
        $scope.UniqueTag = "";
        /**
        * @ngdoc property
        * @name .#Password
        * @returns {String} Password
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Default is Empty string
        */
        $scope.Password = "";
        /**
       * @ngdoc property
       * @name .#HashedPassword
       * @returns {String} HashedPassword
       * @propertyOf WisR.controller:HomeController
       * @description Property the SHA512 hashed version of the password
       * Default is Empty string
       */
        $scope.HashedPassword = "";
        /**
        * @ngdoc property
        * @name .#HasChat
        * @returns {Boolean} HasChat
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Default is Empty string
        */
        $scope.HasChat = true;
        /**
        * @ngdoc property
        * @name .#UsersCanAsk
        * @returns {Boolean} UsersCanAsk
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Describes whether users can ask questions in the room.
        * Default is true
        */
        $scope.UserCanAsk = true;
        /**
        * @ngdoc property
        * @name .#AllowAnonymous
        * @returns {Boolean} AllowAnonymous
        * @propertyOf WisR.controller:HomeController
        * @description Property that is set when creating a new room in the modal window
        * Describes whether anonymous users are allowed in the room.
        * Default is Empty string
        */
        $scope.AllowAnonymous = true;
        /**
         * @ngdoc property
         * @name .#UseLocation
         * @returns {Boolean} UseLocation
         * @propertyOf WisR.controller:HomeController
         * @description Property that is set when creating a new room in the modal window
         * Describes whether is should be possible to find the room by being near it(location wise)
         * Default is Empty string
         */
        $scope.UseLocation = false;
        /**
        * @ngdoc property 
        * @name .#Rooms 
        * @returns {Array<Room>} Rooms 
        *  @propertyOf WisR.controller:HomeController 
        * @description Collection that contains all rooms, this container gets filtered by location and shown in the table 
        */
        $scope.Rooms = null;
        /**
        * @ngdoc property
        * @name .#userId
        * @returns {String} userId
        * @propertyOf WisR.controller:HomeController
        * @description Property that contains id of the current user. This id is generated by the database.
        */
        $scope.userId = null;
        /**
         * @ngdoc property
         * @name .#locationLatitude
         * @returns {Float} locationLatitude
         * @propertyOf WisR.controller:HomeController
         * @description Property that contains the latitude information about the current users location
         */
        $scope.locationLatitude = null;
        /**
         * @ngdoc property
         * @name .#locationLongitude
         * @returns {Float} locationLongitude
         * @propertyOf WisR.controller:HomeController
         * @description Property that contains the longitude information about the current users location
         */
        $scope.locationLongitude = null;
        /**
         * @ngdoc property
         * @name .#currentAddress
         * @returns {String} currentAddress
         * @propertyOf WisR.controller:HomeController
         * @description Property that contains the formatted address for the current location
         */
        $scope.currentAddress = null;
        /**
         * @ngdoc property
         * @name .#roomsLoaded
         * @returns {Boolean} roomsLoaded
         * @propertyOf WisR.controller:HomeController
         * @description Property that states whether the rooms have been loaded from the database(Used to remove loading animation from view)
         */
        $scope.roomsLoaded = null;
        /**
         * @ngdoc property
         * @name .#uniqueRoomTag
         * @returns {String} uniqueRoomTag
         * @propertyOf WisR.controller:HomeController
         * @description Property that contains string written in the "UniqueTag" field when trying to connect to a room by unique tag.
         */
        $scope.uniqueRoomTag = null;
        /**
         * @ngdoc property
         * @name .#Message
         * @returns {String} Message
         * @propertyOf WisR.controller:HomeController
         * @description Property that contains string written in the message div. Used for error messages when connecting to a room
         */
        $scope.Message = null;
        //#endregion

        //#region SignalR functions
        ///Connect to SignalR hub and wait for new room

        $(function () {
            /// Declare a proxy to reference the hub.
            var hub = $.connection.roomHub;
            /// Create a function that the hub can call to broadcast messages.
            /**
            * @ngdoc method
            * @name HomeController#broadcastRoom
            * @methodOf WisR.controller:HomeController
            * @description
            * Function that is called when a new room has been created. This gets called by the function "Send" in the RoomHub.
            * The function adds the new room to the Rooms collection.
            * @param {Room} roomToAdd The room to add to the rooms collection
            */
            hub.client.broadcastRoom = function (roomToAdd) {
                $scope.Rooms.push(JSON.parse(roomToAdd));
                $scope.$apply();
            };
            /**
            * @ngdoc method
            * @name HomeController#broadcastUpdateRoom
            * @methodOf WisR.controller:HomeController
            *
            * @description
            * Function that is called when a room has been changed. This gets called by the function "Update" in the RoomHub.
            * The function adds the updates to the room in the Rooms collection.
            * @param {Room} roomToUpdate The room to update in the rooms collection
            */
            hub.client.broadcastUpdateRoom = function (roomToUpdate) {
                var tempRoom = JSON.parse(roomToUpdate);
                for (var i = 0; i < $scope.Rooms.length; i++) {
                    if ($scope.Rooms[i]._id == tempRoom._id) {
                        $scope.Rooms[i] = tempRoom;
                        $scope.$apply();
                    }
                }
            };
            $.connection.hub.start();
        });

        //#endregion

        //#region Room specific functions

        ///Function to get all rooms when loading page
        /**
        * @ngdoc method
        * @name HomeController#getRooms
        * @methodOf WisR.controller:HomeController
        *
        * @description
        * Function to get all rooms when loading page, this function also maps the userId from the window to the property "userId", and the location of the current user to the properties "locationLatitude" and "locationLongitude"
        */
        $scope.getRooms = function () {
            $http.get(configs.restHostName + '/Room/GetAll').then(function (response) {
                $scope.Rooms = response.data;
                $scope.userId = window.userId;
                $scope.locationLatitude = $scope.currentLocation.coords.latitude;
                $scope.locationLongitude = $scope.currentLocation.coords.longitude;
                $scope.roomsLoaded = true;
            });
        };
        /**
        * @ngdoc method
        * @name HomeController#postRoom
        * @methodOf WisR.controller:HomeController
        *
        * @description
        * Function to create a new room on the database with the entered information from the modal window.
        * If no error is returned, this function calls "changeViewToRoom" and adds room to connected rooms(so that user doesn't have to enter password)
        */
        ///Creates a new room, and connects to it
        $scope.postRoom = function () {
            if ($scope.Password.length !== 0) {
            $scope.HashedPassword = CryptoJS.SHA512($scope.Password).toString();
            }
            
            ///Make get request for json object conversion
            $http.post(configs.baseHostName + '/Home/toJsonRoom',
                {
                    RoomName: $scope.RoomName,
                    CreatedBy: window.userId,
                    locationTimestamp: $scope.currentLocation.timestamp,
                    locationLatitude: $scope.currentLocation.coords.latitude,
                    locationLongitude: $scope.currentLocation.coords.longitude,
                    locationAccuracyMeters: $scope.currentLocation.coords.accuracy,
                    locationFormattedAddress: $scope.currentAddress,
                    radius: $scope.Radius,
                    tag: $scope.UniqueTag,
                    password: $scope.HashedPassword,
                    hasChat: $scope.HasChat,
                    userCanAsk: $scope.UserCanAsk,
                    allowAnonymous: $scope.AllowAnonymous,
                    useLocation: $scope.UseLocation
                }).
                then(function (response) {
                    ///Use response to send to REST API
                    $http.post(configs.restHostName + '/Room/CreateRoom', { Room: JSON.stringify(response.data) }).
                        then(function (response) {
                            ///Check for error messages
                            if (response.data.ErrorMessage != undefined) {
                                $("#RoomCreationError").text("Error: " + response.data.ErrorMessage);
                                return;
                            }


                            //Add roomId to connected rooms for the user
                            //TODO: error in message, handling?
                            var room = { _id: response.data.split(";")[0] }
                            $scope.currentUser.ConnectedRoomIds.push(room._id);

                            var newIds = "";
                            for (var i = 0; i < $scope.currentUser.ConnectedRoomIds.length; i++) {
                                if (i != $scope.currentUser.ConnectedRoomIds.length - 1) {
                                    newIds = newIds + $scope.currentUser.ConnectedRoomIds[i] + ',';
                                } else {
                                    newIds = newIds + $scope.currentUser.ConnectedRoomIds[i];
                                }
                            }

                            $http.post(configs.baseHostName + '/Home/toJsonUser', {
                                facebookId: $scope.currentUser.FacebookId,
                                lDAPUserName: $scope.currentUser.LDAPUserName,
                                displayName: $scope.currentUser.DisplayName,
                                email: $scope.currentUser.Email,
                                encryptedPassword: $scope.currentUser.EncryptedPassword,
                                connectedRoomIds: newIds
                            }).then(function (response) {
                                ///Use response to send to REST API
                                $http.post(configs.restHostName + '/User/UpdateUser', { User: JSON.stringify(response.data), Id: $scope.currentUser._id }).
                                    then(function (response) {

                                    });
                            });
                            
                            $scope.changeViewToRoom(room);
                        });
                });
        }
        /**
       * @ngdoc watch
       * @name HomeController#userIdWatch
       * @methodOf WisR.controller:HomeController
       *
       * @description
       * Function that watches the userId variable and fetches user from restAPI when it changes
       * @param {Room} room The room that the view changes to
       */
        $scope.$watch(function () {
            return $window.userId;
        }, function (n, o) {
            $scope.userId = n;
            if (n == "NoUser") {
                $scope.anonymousUser = true;
            }
            else if (n != undefined) {
                $http.post(configs.restHostName + '/User/GetById', { id: n }).then(function (response) {
                    $scope.currentUser = response.data;
                });
            }
        });
        /**
       * @ngdoc method
       * @name HomeController#changeViewToRoom
       * @methodOf WisR.controller:HomeController
       *
       * @description
       * Function to change view to a specific room. Contains validation if room has allowAnonymous set to false
       * @param {Room} room The room that the view changes to
       */

        ///Changes to view to a new room
        $scope.changeViewToRoom = function (room) {
            if (!room.AllowAnonymous && $scope.userId == 'NoUser') {
                $scope.Message = Resources.RoomTagRequiresLogin;
            } else {
                $scope.RoomId = room._id;
                var url = $("#RedirectTo").val() + "?RoomId=" + $scope.RoomId;
                location.href = url;
            }
        }
        /**
      * @ngdoc method
      * @name HomeController#connectWithUniqueTag
      * @methodOf WisR.controller:HomeController
      *
      * @description
      * Function that changes view to a specific room, with the tag in the "uniqueRoomTag" property
      */

        ///Connects to a new room based on it's tag
        $scope.connectWithUniqueTag = function () {
            $http.post(configs.restHostName + '/Room/GetByUniqueTag', { tag: $scope.uniqueRoomTag }).then(function (response) {
                ///TODO verification of response
                if (response.data._id != undefined) {
                    $scope.changeViewToRoom(response.data);
                } else {
                    $scope.Message =Resources.NoRoomWithThatTag + $scope.uniqueRoomTag;
                }
            });
        }
        /**
      * @ngdoc method
      * @name HomeController#getCurrentPosition
      * @methodOf WisR.controller:HomeController
      *
      * @description
      * Geolocation function that gets called at load of the home index page to get the location of the user. When the location is fetched the property currentLocation is set with the value and the getRooms function is called.
      * At this point the function calls geocode to get the formatted address
      */
        //this check is to make the tests excecuteable
        if (navigator.geolocation != undefined) {
            ///Calls and get the currentlocation, and after that gets the rooms
            navigator.geolocation.getCurrentPosition(function (position) {
                $scope.currentLocation = position;
                $("#loadingLabel").text(Resources.LoadingRooms +"...");
                $scope.getRooms();
                var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                geocoder.geocode({ 'location': latLng }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[1]) {
                            $scope.currentAddress = results[1].formatted_address;
                        } else {
                            window.alert(Resources.NoResponseFound);
                        }
                    } else {
                        window.alert(Resources.GeoCoderFailedDueTo + status);
                    }
                });
            });

        }
        //#endregion
    }
]);